load("@aspect_bazel_lib//lib:diff_test.bzl", "diff_test")
load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@aspect_bazel_lib//lib:directory_path.bzl", "directory_path")

FORMATS = ["iife", "cjs", "esm"]

# Bundle in each format
[
    esbuild(
        name = "bundle_%s" % format,
        entry_point = "main.js",
        srcs = ["main.js"],
        format = format,
        sourcemap = "external", # to easily diff against other files
    )
    for format in FORMATS
]

# Adding platform = browser should produce the same
esbuild(
    name = "bundle_points_cjs_browser",
    entry_points = ["main.js"],
    srcs = ["main.js"],
    format = "cjs",
    platform = "browser",
    sourcemap = "external", # to easily diff against other files
)
directory_path(
    name = "bundle_points_cjs_browser-main.js",
    directory = ":bundle_points_cjs_browser",
    path = "main.js",
)
diff_test(
    name = "bundle_cjs_browser_test",
    file1 = ":bundle_points_cjs_browser-main.js",
    file2 = ":bundle_cjs.js",
)

# entry_point vs entry_points should produce the same
esbuild(
    name = "bundle_point_cjs_browser",
    entry_point = "main.js",
    srcs = ["main.js"],
    format = "cjs",
    platform = "browser",
    sourcemap = "external", # to easily diff against other files
)
diff_test(
    name = "bundle_cjs_browser-point-vs-points_test",
    file1 = ":bundle_points_cjs_browser-main.js",
    file2 = ":bundle_point_cjs_browser.js",
)

# output_dir should produce the same
esbuild(
    name = "bundle_points_cjs_dir",
    entry_point = "main.js",
    output_dir = True,
    srcs = ["main.js"],
    format = "cjs",
    platform = "browser",
    sourcemap = "external", # to easily diff against other files
)
directory_path(
    name = "bundle_points_cjs_dir-main.js",
    directory = ":bundle_points_cjs_dir",
    path = "main.js",
)
diff_test(
    name = "bundle_points_cjs_dir_test",
    file1 = ":bundle_points_cjs_dir-main.js",
    file2 = ":bundle_cjs.js",
)

# Test the output of the various formats

TESTS = [
    "bundle_iife.js",
    "bundle_cjs.js",
    "bundle_esm.js",
]

# Make sed replacements for consistency on different platform
[
    genrule(
        name = "sed_{}".format(basename.replace(".", "_").replace("/", "_")),
        srcs = [":{}".format(basename)],
        outs = ["sed_{}".format(basename)],
        cmd = "sed -E \"s/(\\.\\.\\/.*)?bazel-out\\/.*examples\\//examples\\//\" $(location :{}) > $@".format(basename),
    )
    for basename in TESTS
]

write_source_files(
    name = "assertions",
    files = dict([["golden/%s" % basename, "sed_%s" % basename] for basename in TESTS])
)