"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@aspect_rules_js//npm:npm_import.bzl", "npm_import")
load("@bazel_skylib//lib:versions.bzl", "versions")
load("//esbuild/private:toolchains_repo.bzl", "get_platforms", "toolchains_repo")
load("//esbuild/private:versions.bzl", "TOOL_VERSIONS")

LATEST_VERSION = TOOL_VERSIONS.keys()[-1]

_DOC = "Fetch external tools needed for esbuild toolchain"
_ATTRS = {
    "esbuild_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys()),
    "platform": attr.string(mandatory = True),
    # The default doesn't appear here because the value depends on the version being used.
    "url": attr.string(),
}

def _esbuild_repo_impl(repository_ctx):
    esbuild = TOOL_VERSIONS[repository_ctx.attr.esbuild_version]
    integrity = esbuild[repository_ctx.attr.platform]
    url = repository_ctx.attr.url
    if not url:
        url = (
            "https://registry.npmjs.org/@esbuild/{platform}/-/{platform}-{version}.tgz" if versions.is_at_least("0.16.0", repository_ctx.attr.esbuild_version) else "https://registry.npmjs.org/esbuild-{platform}/-/esbuild-{platform}-{version}.tgz"
        )

    repository_ctx.download_and_extract(
        url = url.format(
            platform = repository_ctx.attr.platform,
            version = repository_ctx.attr.esbuild_version,
        ),
        integrity = integrity,
    )
    repository_ctx.symlink(
        Label("@aspect_rules_esbuild//esbuild/private:launcher.js"),
        "launcher.js",
    )
    build_content = """#Generated by esbuild/repositories.bzl
load("@aspect_rules_esbuild//esbuild:toolchain.bzl", "esbuild_toolchain")
load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@aspect_rules_js//npm:defs.bzl", "npm_link_package")

npm_link_package(
    name = "node_modules/esbuild",
    src = "@npm__esbuild_{version}//:pkg",
)

js_binary(
    name = "launcher",
    entry_point = "launcher.js",
    data = [":node_modules/esbuild"],
)

esbuild_toolchain(
    name = "esbuild_toolchain",
    launcher = ":launcher",
    target_tool = select({{
        "@bazel_tools//src/conditions:host_windows": "package/esbuild.exe",
        "//conditions:default": "package/bin/esbuild",
    }}),
)
""".format(version = repository_ctx.attr.esbuild_version)

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

esbuild_repositories = repository_rule(
    _esbuild_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def esbuild_register_toolchains(name, esbuild_version, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "esbuild_linux-64" -
      this repository is lazily fetched when node is needed for that platform.
    - TODO: create a convenience repository for the host platform like "esbuild_host"
    - create a repository exposing toolchains for each platform like "esbuild_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "esbuild0_14"
        esbuild_version: a supported version like "0.14.36"
        **kwargs: passed to each node_repositories call
    """
    if esbuild_version not in TOOL_VERSIONS.keys():
        fail("""\
esbuild version {} is not currently mirrored into rules_esbuild.
Please instead choose one of these available versions: {}
Or, make a PR to the repo running /scripts/mirror_release.sh to add the newest version.
If you need custom versions, please file an issue.""".format(esbuild_version, TOOL_VERSIONS.keys()))
    for platform in get_platforms(esbuild_version).keys():
        esbuild_repositories(
            name = name + "_" + platform,
            esbuild_version = esbuild_version,
            platform = platform,
            **kwargs
        )
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        esbuild_version = esbuild_version,
        user_repository_name = name,
    )

    npm_import(
        name = "npm__esbuild_" + esbuild_version,
        run_lifecycle_hooks = False,
        integrity = TOOL_VERSIONS[esbuild_version]["npm"],
        package = "esbuild",
        version = esbuild_version,
    )
